{"name":"AuthN","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Simple, Lightweight, & Easy Authentication for any framework","body":"authn is a simplistic and barebones authentication library.\r\nIt only does a few things for you, such as:\r\n\r\n  * Give you a controller and helper method to access the \"current user\"\r\n  * Give you simple \"sign in\", \"sign out\", and \"auto sign in\" methods\r\n  * Works with any ORM that behaves likes ActiveModel\r\n  * Functions with any framework that has a session interface\r\n\r\nIn addition you can bring in other behavior sets like:\r\n\r\n  * authn-activation: Account activation\r\n  * authn-protection: Failed login protection\r\n  * authn-recovery: Password recovery\r\n  * authn-rails: Extend Rails with AuthN\r\n\r\nUsing AuthN\r\n===========\r\n\r\n**The Model**\r\n\r\nIn order to use AuthN in your model you'll only need to follow a few steps:\r\n\r\n  * ActiveModel's SecurePassword requires the model have an accessor called `password_digest`. (See schema below, for the ActiveRecord version)\r\n  * The `AuthN::Model` module will need to be included into the model. (See codeblock below)\r\n  * The singleton method `has_authentication` will need to be called.\r\n  * The singleton method `has_secure_password` will need to be called.\r\n\r\nThat's it!\r\nNow for those fun code examples:\r\n\r\n``` ruby\r\n# create_table :accounts do |t|\r\n#   t.string :email\r\n#   t.binary :password_digest\r\n#\r\n#   t.timestamps\r\n# end\r\n# add_index :accounts, :email\r\n#\r\n\r\nclass Account < ActiveRecord::Base\r\n  include AuthN::Model\r\n\r\n  has_authentication\r\n  has_secure_password\r\n\r\n  validates :email, uniqueness: true, presence: true, length: 5..255\r\n  validates :password, length: 10..1024\r\n\r\n  attr_accessible :email\r\nend\r\n```\r\n\r\nSee?\r\nNo muss, no fuss.\r\nOf course authn does (and will) provide extras, like activation or rails integration.\r\nYou'll need to read those repositories for more information.\r\nHere's a taste of what a \"fully loaded\" model looks like:\r\n\r\n``` ruby\r\n# create_table :accounts do |t|\r\n#   t.string :email\r\n#   t.binary :password_digest\r\n#\r\n#   t.string :activation_token\r\n#   t.boolean :activation_state, default: false\r\n#   t.datetime :activation_expires_at\r\n#\r\n#   t.string :password_recovery_token\r\n#   t.datetime :password_recovery_expires_at\r\n#\r\n#   t.string :login_protection_token\r\n#   t.datetime :login_protection_expires_at\r\n#   t.integer :login_protection_attempts, default: 0\r\n#\r\n#   t.timestamps\r\n# end\r\n# add_index :accounts, :email\r\n# add_index :accounts, :activation_token\r\n# add_index :accounts, :activation_state\r\n# add_index :accounts, :password_recovery_token\r\n# add_index :accounts, :login_protection_token\r\n#\r\n\r\nclass Account < ActiveRecord::Base\r\n  include AuthN::Model\r\n\r\n  has_authentication\r\n  has_password_recovery mailer: \"PasswordRecoveryMailer\"\r\n  has_activation mailer: \"ActivationMailer\", on_create_send: false\r\n  has_login_protection maximum: 3\r\n  has_secure_password\r\n\r\n  validates :email, uniqueness: true, presence: true, length: 5..255\r\n  validates :password, length: 10..1024\r\n\r\n  attr_accessible :email\r\nend\r\n```\r\n\r\nYou'll notice that each singleton method can take some options passed to it in the form of a Hash (or similar).\r\nThese options *supercede* the global config options given by your AuthN config.\r\nThose options supercede the default config in the gem.\r\n\r\n\r\n**The Controller**\r\n\r\nInside your controllers you have access to these methods:\r\n\r\n  * `login email: \"jpublic@mail.com\", password: \"12341234\"`, for logging accounts in if the creds match\r\n  * `auto_login Account.find(23)`, for automatically logging in a certain account\r\n  * `logged_in?` for checking if there's a current user\r\n  * `current_user` which returns the current user instance\r\n  * `require_login`, which redirects to the `unauthorized` action if the user isn't logged in\r\n  * `logout`, for logging out of the current user\r\n\r\nFor more information, check the [wiki](/wiki)\r\n\r\nInstalling AuthN\r\n================\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'authn'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install authn\r\n\r\nLooking for instructions on how to setup with Rails?\r\nFind them over [here](https://github.com/krainboltgreene/authn-rails)\r\n\r\n\r\nContributing\r\n============\r\n\r\n  1. Fork it\r\n  2. Create your feature branch (`git checkout -b my-new-feature`)\r\n  3. Commit your changes (`git commit -am 'Add some feature'`)\r\n  4. Push to the branch (`git push origin my-new-feature`)\r\n  5. Create new Pull Request\r\n\r\nLicense\r\n=======\r\n\r\n    Copyright (c) 2012 Kurtis Rainbolt-Greene\r\n\r\n    MIT License\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining\r\n    a copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":""}